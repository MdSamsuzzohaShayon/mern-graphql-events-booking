{"version":3,"sources":["config/keys.js","context/auth-context.js","pages/Auth.jsx","components/EventList.jsx","components/ModalCom.jsx","pages/Events.jsx","components/BookingList.jsx","components/BookingCart.jsx","pages/Bookings.jsx","components/Navigation.jsx","App.js","reportWebVitals.js","index.js"],"names":["keys","LOCALHOST_API","HEROKU_API","API_ENDPOINT","React","createContext","token","userId","login","userid","tokenExpiration","logout","Auth","props","switchModeHandler","setState","prevState","isLogin","submitHandler","event","preventDefault","email","emailEl","current","value","password","passwordEl","trim","length","console","log","requestBody","query","variables","state","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","data","context","catch","err","createRef","Container","Form","onSubmit","this","Group","widths","Field","className","type","ref","placeholder","Button","color","Or","onClick","Component","contextType","AuthContext","EventList","useState","open","setOpen","selectEvents","setSelectedEvents","events","map","_id","List","Item","Segment","Header","as","title","Grid","columns","relaxed","stackable","Column","price","verticalAlign","textAlign","Date","date","toLocaleDateString","Divider","vertical","authUserId","creator","Modal","onClose","onOpen","e","prevOpen","target","trigger","Content","Description","description","Actions","content","labelPosition","icon","id","setTimeout","bookEventHandler","positive","size","animated","ModalCom","modalContent","Events","closeTheModal","openTheModal","modalHandleSubmit","titleElRef","priceElRef","dateElRef","descriptionElRef","updatedEvents","push","createEvent","fetchEvents","isLoading","formContent","rows","Fragment","Dimmer","active","Loader","BookingList","bookings","booking","createdAt","onDelete","bind","BOOKINGS_BUCKETS","Cheap","min","max","Normal","Expensive","BookingCart","chartData","labels","datasets","values","bucket","filteredBookingsCount","reduce","prev","fillColor","strokeColor","highlightFill","highlightStroke","width","height","options","maintainAspectRatio","Bookings","isActive","fetchBookings","deleteBookingHandler","bookingId","filter","panes","menuItem","render","Tab","Pane","Navigation","Consumer","Menu","to","style","name","position","App","document","Provider","from","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2bcad7fa.chunk.js","sourcesContent":["const keys = {\n    LOCALHOST_API : \"http://localhost:8000/graphql\",\n    HEROKU_API : \"https://mern-graphql-events.herokuapp.com/graphql\",\n    API_ENDPOINT: \"https://mern-graphql-events.herokuapp.com/graphql\"\n};\n\n\nexport default keys;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userid, tokenExpiration ) =>{},\n    logout: () =>{}\n});","import React, { Component } from 'react';\nimport keys from '../config/keys';\nimport { Container, Form, Button } from 'semantic-ui-react';\nimport AuthContext from \"../context/auth-context\";\n\n\nclass Auth extends Component {\n\n\n\n    // REFERANCES OR REF API BUILT INTO REACT \n    // https://reactjs.org/docs/refs-and-the-dom.html\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLogin: true\n        }\n        this.emailEl = React.createRef();\n        this.passwordEl = React.createRef();\n\n    }\n\n\n    static contextType = AuthContext;\n\n\n\n    switchModeHandler = () => {\n        this.setState(prevState => {\n            // REVERT THE VALUE \n            return { isLogin: !prevState.isLogin }\n        });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        const email = this.emailEl.current.value;\n        const password = this.passwordEl.current.value;\n\n\n        if (email.trim().length === 0 || password.trim().length === 0) {\n            return;\n        }\n\n        console.log(email, password);\n\n\n\n        \n        // SENDING REQUEST TO BACKEND GRAPHQL API \n\n        // QUERY FOR LOGIN \n        // login(email: String!, password: String!): AuthData!\n        let requestBody = {\n            query: `\n                query Login($email: String!, $password: String!){\n                    login(email: $email, password: $password){\n                        userId\n                        token\n                        tokenExpiration\n                    }\n                }\n            `,\n            variables:{\n                email,\n                password\n            }\n        };\n\n\n\n\n        if (!this.state.isLogin) {\n            // MUTATION  FOR SIGN UP \n            // createUser(userInput: UserInput): User\n            requestBody = {\n                query: `\n                mutation CreateUser($email: String!, $password: String!){\n                    createUser(userInput: {email: $email, password: $password}){\n                        _id\n                        email\n                    }\n                }\n            `,\n            variables: {\n                email,\n                password\n            }\n            };\n        }\n\n\n\n\n\n\n\n\n\n\n        fetch(keys.API_ENDPOINT, {\n            method: \"POST\",  //GRAPHQL WORKS WITH ONLY POST REQUEST\n            body: JSON.stringify(requestBody),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                console.log(resData);\n                if (resData.data.login.token) {\n                    this.context.login(resData.data.login.token, resData.data.login.userId, resData.data.login.tokenExpiration);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n    render() {\n        return (\n            <Container>\n                <br /><br />\n                <Form onSubmit={this.submitHandler}>\n                    <Form.Group widths=\"equal\">\n                        <Form.Field>\n                            <label className=\"ui header blue\" >Email</label>\n                            <input type=\"email\" ref={this.emailEl} placeholder='Enter your email' />\n                        </Form.Field>\n                        <Form.Field>\n                            <label className=\"ui header blue\" >Password</label>\n                            <input type=\"password\" ref={this.passwordEl} placeholder='Enter your password' />\n                        </Form.Field>\n                    </Form.Group>\n                    <Button.Group>\n                        <Button color=\"teal\" type=\"submit\">Submit</Button>\n                        <Button.Or />\n                        <Button color=\"teal\" onClick={this.switchModeHandler} type=\"button\">Switch to {this.state.isLogin ? \"Signup\" : \"Login\"}</Button>\n                    </Button.Group>\n                </Form>\n            </Container>\n\n        );\n    }\n}\n\n\nexport default Auth;","import React, { useState } from 'react';\nimport keys from '../config/keys';\nimport { Segment, List, Button, Header, Grid, Divider, Modal } from 'semantic-ui-react';\n\n\n\nconst EventList = (props) => {\n    const [open, setOpen] = useState(false);\n    const [selectEvents, setSelectedEvents] = useState(null);\n\n\n\n\n    function bookEventHandler(event) {\n        if (!props.context.token) {\n            setOpen(prevOpen => prevOpen = false);\n            return;\n        }\n        console.log(\"Token: \", props.context.token);\n        // e.preventDefault();\n        setOpen(prevOpen => prevOpen = false);\n        // type Booking{\n        //     _id: ID!\n        //     event: Event!\n        //     user: User!\n        //     createdAt: String!\n        //     updatedAt: String!\n        // }\n        // bookEvent(eventId: ID!): Booking!\n\n        const requestBody = {\n            query: `\n                mutation BookEvent($id: ID!){\n                    bookEvent (eventId: $id){\n                    createdAt\n                    updatedAt\n                    }\n                }\n        `,\n            variables: {\n                id: selectEvents\n            }\n\n        };\n\n\n        fetch(keys.API_ENDPOINT, {\n            method: \"POST\",  //GRAPHQL WORKS WITH ONLY POST REQUEST\n            body: JSON.stringify(requestBody),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + props.context.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                // const events = resData.data.events;\n                // USING CUSTOM LEADER \n                setTimeout(() => {\n                    // this.setState({ events, isLoading: false });\n                    console.log(resData);\n                }, 1000);\n            })\n            .catch(err => {\n                console.log(err);\n                // this.setState({ isLoading: false });\n            });\n    }\n\n\n    const events = props.events.map(event => {\n        console.log(\"Event ID: \", event._id);\n        function openModalHandler(e) {\n            e.preventDefault();\n            setOpen(prevOpen => prevOpen = true);\n            console.log(\"Open events ID: \", e.target.value);\n            setSelectedEvents(e.target.value);\n        }\n        return (\n            <List.Item\n                key={event._id}\n            >\n                <Segment color=\"teal\">\n                    <Header as=\"h3\" color=\"teal\"  >\n                        {event.title}\n                    </Header>\n                    <Grid columns={2} relaxed='very' stackable>\n                        <Grid.Column>\n                            <Header as=\"h5\" color=\"red\" >Ticket Price $ {event.price}</Header>\n                        </Grid.Column>\n\n                        <Grid.Column verticalAlign='middle'>\n                            <Header as=\"h5\" color=\"teal\" textAlign=\"right\">Date {new Date(event.date).toLocaleDateString()}</Header>\n\n                        </Grid.Column>\n                    </Grid>\n\n                    <Divider vertical>And</Divider>\n                    {/* VIEW DETAILS AND MODAL START  */}\n\n\n                    {props.authUserId === event.creator._id ? <p><br />you are owner of this event</p> : <Modal\n                        onClose={() => setOpen(false)}\n                        // onOpen={() => setOpen(true)}\n                        onOpen={openModalHandler}\n                        open={open}\n                        trigger={<Button color=\"teal\" value={event._id} >View Details</Button>}\n                    >\n                        <Modal.Header>Event Details</Modal.Header>\n                        <Modal.Content >\n\n                            <Modal.Description>\n                                <Header>{event.title}</Header>\n                                <Header as=\"h5\" color=\"red\" >Price $ {event.price}</Header>\n                                <p>\n                                    {event.description}\n                                </p>\n                                <Header as=\"h3\" color=\"teal\">{new Date(event.date).toLocaleDateString()}</Header>\n                            </Modal.Description>\n                        </Modal.Content>\n                        <Modal.Actions>\n\n                            <Button color='black' onClick={() => setOpen(false)}>\n                                Cancel\n                            </Button>\n\n                            {/* BOOK EVENT  */}\n                            <Button\n                                content={props.context.token ? \"Book Event\" : \"Confirm\"}\n                                labelPosition='right'\n                                icon='checkmark'\n                                onClick={e => bookEventHandler(event)}\n                                positive\n                            />\n                        </Modal.Actions>\n                    </Modal>}\n\n\n\n                    {/* VIEW DETAILS AND MODAL ENDS  */}\n\n                </Segment>\n\n            </List.Item>\n        );\n    });\n    return (\n\n        <List size=\"large\" animated>\n            {events}\n        </List>\n    )\n};\n\nexport default EventList;\n","// THIS WILL ONLY WORK ON CALL BASED COMPONENT \n\nimport React from 'react';\nimport { Button,  Modal } from \"semantic-ui-react\";\n\n\n\nconst ModalCom = props => {\n    return (\n        <Modal\n            onClose={props.onClose}\n            onOpen={props.onOpen}\n            open={props.open}\n            trigger={props.trigger}\n        >\n            <Modal.Header>{props.title} </Modal.Header>\n            <Modal.Content >\n                {props.modalContent}\n            </Modal.Content>\n            <Modal.Actions>\n                <Button color='black' onClick={props.onClose}> Close</Button>\n                {/* FORM SUBMISSION BUTTON */}\n                {/* <Button\n                    content=\"Submit\"\n                    type=\"submit\"\n                    labelPosition='right'\n                    icon='checkmark'\n                    onClick={props.onOpen}\n                    positive\n                /> */}\n            </Modal.Actions>\n        </Modal>\n    );\n}\n\n\nexport default ModalCom;","import React, { Component } from 'react';\nimport keys from '../config/keys';\nimport { Container, Button, Header, Segment, Form, Dimmer, Loader } from 'semantic-ui-react';\nimport EventList from \"../components/EventList\";\nimport ModalCom from \"../components/ModalCom\";\nimport AuthContext from \"../context/auth-context\";\n\n\n\n\n\n\nclass Events extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            events: [],\n            isLoading: false\n        };\n        // https://reactjs.org/docs/refs-and-the-dom.html\n        this.titleElRef = React.createRef();\n        this.priceElRef = React.createRef();\n        this.dateElRef = React.createRef();\n        this.descriptionElRef = React.createRef();\n    }\n\n\n    // ACCESSING TOKEN FROM CONTEXT API \n    static contextType = AuthContext;\n\n\n\n\n    componentDidMount() {\n        this.fetchEvents();\n    }\n\n\n\n    closeTheModal = () => {\n        this.setState({\n            open: false\n        });\n    }\n\n    openTheModal = () => {\n        console.log(\"closing the modal\");\n        this.setState({\n            open: true\n        });\n    }\n\n\n\n\n\n    modalHandleSubmit = () => {\n        console.log(\"modal handle submit\");\n        const title = this.titleElRef.current.value;\n        const price = +this.priceElRef.current.value;  // PLUS SIGN CONVERT IT TO NUMBER VARIABLE\n        const date = this.dateElRef.current.value;\n        const description = this.descriptionElRef.current.value;\n        if (title.trim().length === 0 || price <= 0 || date.trim().length === 0 || description.trim().length === 0) {\n            return;\n        }\n        const event = { title, price, date, description };\n        console.log(\"Event: \", event);\n\n\n\n\n        // createEvent(eventInput: EventInput): Event\n        /*\n        input EventInput{\n            title: String!\n            description: String!\n            price: Float!\n            date: String!\n        }\n        */\n        // REQUEST BODY WILL BE ALWAYS SAME SO WEB DON'T NEED TO CHECK LOGIN OR NOT\n        const requestBody = {\n            query: `\n                mutation CreateEvent($title: String!, $description: String!, $price: Float!, $date: String!){\n                    createEvent(eventInput: {title: $title, description: $description, price: $price, date: $date}) {\n                    _id\n                    title\n                    description\n                    date\n                    price\n                    creator {\n                        _id\n                        email\n                    }\n                    }\n                }\n                `,\n            variables: {\n                title,\n                description,\n                price,\n                date\n            }\n        };\n\n\n\n        const token = this.context.token;\n        fetch(keys.API_ENDPOINT, {\n            method: \"POST\",  //GRAPHQL WORKS WITH ONLY POST REQUEST\n            body: JSON.stringify(requestBody),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                // this.fetchEvents();\n                this.setState(prevState => {\n                    const updatedEvents = [...prevState.events];\n                    updatedEvents.push({\n                        _id: resData.data.createEvent._id,\n                        title: resData.data.createEvent.title,\n                        description: resData.data.createEvent.description,\n                        date: resData.data.createEvent.date,\n                        price: resData.data.createEvent.price,\n                        creator: {\n                            _id: this.context.userId\n                        }\n                    });\n                    return { events: updatedEvents };\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n    }\n\n\n    fetchEvents = () => {\n        this.setState({ isLoading: true });\n        // events: [Event!]!\n        /*\n        type Event{\n        _id: ID!\n        title: String!\n        description: String!\n        price: Float!\n        date: String!\n        creator: User!\n    }\n        */\n        // GETTING ALL EVENTS\n        const requestBody = {\n            query: `\n                query {\n                    events{\n                    _id\n                    title\n                    description\n                    date\n                    price\n                    creator {\n                        _id\n                        email\n                    }\n                    }\n                }\n        `,\n        };\n\n\n        fetch(keys.API_ENDPOINT, {\n            method: \"POST\",  //GRAPHQL WORKS WITH ONLY POST REQUEST\n            body: JSON.stringify(requestBody),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                const events = resData.data.events;\n                // USING CUSTOM LEADER \n                setTimeout(() => {\n                    this.setState({ events, isLoading: false });\n                }, 600);\n            })\n            .catch(err => {\n                console.log(err);\n                this.setState({ isLoading: false });\n            });\n    }\n\n\n\n    formContent = () => {\n        console.log(\"form content\");\n        return (\n            <Form onSubmit={this.modalHandleSubmit} >\n                <Form.Field>\n                    <label className=\"ui header blue\" >Title</label>\n                    <input ref={this.titleElRef} type=\"text\" placeholder='Enter events title' />\n                </Form.Field>\n                <Form.Group widths=\"equal\">\n                    <Form.Field>\n                        <label className=\"ui header blue\" >Price</label>\n                        <input ref={this.priceElRef} type=\"number\" placeholder='Entry events price' />\n                    </Form.Field>\n                    <Form.Field>\n                        <label className=\"ui header blue\" >Date</label>\n                        <input ref={this.dateElRef} type=\"datetime-local\" placeholder='enter events date' />\n                    </Form.Field>\n                </Form.Group>\n                <Form.Field>\n                    <label className=\"ui header blue\" >Description</label>\n                    <textarea rows={2} ref={this.descriptionElRef} type=\"text\" placeholder='Enter events title' />\n                </Form.Field>\n                <Button className=\"ui blue button\" type='submit'>Submit</Button>\n\n                {/* <Form.TextArea label='Description' rows='2' placeholder='Long descriptions...' /> */}\n            </Form>\n        );\n    }\n\n\n\n\n\n    render() {\n        console.log(\"Token from context: \", this.context.token);\n        return (\n            <React.Fragment>\n\n                <Container >\n                    <br />\n\n\n                    <br /><br />\n                    {/* IF THE TOKEN IS EXIST WE ARE GOING TO RENDER THE SEGMENT OF CREATE EVENT  */}\n                    {this.context.token &&\n                        <Segment >\n                            <br />\n                            <Header textAlign=\"center\">\n                                <h2>Share your own events</h2>\n                                <ModalCom\n                                    onSubmit={this.modalHandleSubmit}\n                                    title=\"Add event\"\n                                    open={this.state.open}\n                                    onOpen={this.openTheModal}\n                                    onClose={this.closeTheModal}\n                                    trigger={<Button color=\"teal\">\n                                        Create Event</Button>}\n                                    modalContent={this.formContent()}\n                                >\n\n                                </ModalCom>\n                            </Header>\n                            <br />\n                        </Segment>\n                    }\n                    {this.state.isLoading ?\n                        <Dimmer active>\n                            <Loader size='massive' >Loading</Loader>\n                        </Dimmer>\n                        : <EventList\n                            authUserId={this.context.userId}\n                            events={this.state.events}\n                            context={this.context}\n                        />}\n\n                </Container>\n            </React.Fragment>\n\n        )\n    }\n}\n\nexport default Events;\n","import React from 'react';\nimport { List, Button, Header, Grid, Divider } from 'semantic-ui-react';\n\nconst BookingList = props => {\n    return (\n        <React.Fragment>\n            <List animated>\n                {props.bookings.map(booking => {\n                    return (\n                        <List.Item key={booking._id}>\n                                <Grid columns={2}> \n                                    <Grid.Column>\n                                        <Header as=\"h3\" color=\"teal\">\n                                            {booking.event.title} -\n                                            {new Date(booking.createdAt).toLocaleDateString()}\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column textAlign=\"right\">\n                                        <Button color=\"red\" onClick={props.onDelete.bind(this, booking._id)} >Cancel</Button>\n                                    </Grid.Column>\n                                </Grid>\n                                <Divider ></Divider>\n                        </List.Item>\n                    );\n                })}\n            </List>\n        </React.Fragment>\n    )\n}\n\n\n\n\n\n\nexport default BookingList;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n// import { Segment } from 'semantic-ui-react';\n// import BarChart from './BarChart';\nconst BOOKINGS_BUCKETS = {\n    Cheap: {\n        min: 0,\n        max: 100\n    },\n    Normal: {\n        min: 100,\n        max: 200\n    },\n    Expensive: {\n        min: 200,\n        max: 10000000\n    }\n};\n\nconst BookingCart = props => {\n    console.log(\"Bookings info: \", props);\n    const chartData = { labels: [], datasets: [] };\n    let values = [];\n    for (const bucket in BOOKINGS_BUCKETS) {\n        const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n            if (\n                current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n                current.event.price < BOOKINGS_BUCKETS[bucket].max\n            ) {\n                return prev + 1;\n            } else {\n                return prev;\n            }\n        }, 0);\n        values.push(filteredBookingsCount);\n        chartData.labels.push(bucket);\n        chartData.datasets.push({\n            // label: \"My First dataset\",\n            fillColor: 'rgba(220,220,220,0.5)',\n            strokeColor: 'rgba(220,220,220,0.8)',\n            highlightFill: 'rgba(220,220,220,0.75)',\n            highlightStroke: 'rgba(220,220,220,1)',\n            data: values\n        });\n        values = [...values];\n        values[values.length - 1] = 0;\n    }\n\n\n\n\n    // console.log(output);\n    return (\n        <React.Fragment>\n            <Bar\n                data={chartData}\n                width={100}\n                height={50}\n                options={{\n                    maintainAspectRatio: true\n                }}\n            />\n        </React.Fragment>\n    );\n}\n\nexport default BookingCart;\n","import React, { Component } from 'react';\nimport keys from '../config/keys';\nimport { Container, Tab, Loader, Dimmer,Segment } from 'semantic-ui-react';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/BookingList';\nimport BookingCart from '../components/BookingCart';\n\nclass Bookings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            bookings: []\n        };\n    }\n\n    isActive = true;\n\n\n    static contextType = AuthContext;\n\n\n\n\n\n\n    componentDidMount() {\n        this.fetchBookings();\n    }\n\n\n    fetchBookings = () => {\n        console.log(\"Fetch bookings\");\n        this.setState({ isLoading: true });\n\n        // type Booking{\n        //     _id: ID!\n        //     event: Event!\n        //     user: User!\n        //     createdAt: String!\n        //     updatedAt: String!\n        // }\n        // bookings: [Booking!]!\n\n        // GETTING ALL bookings\n        const requestBody = {\n            query: `\n                query {\n                    bookings{\n                    _id\n                    createdAt\n                    event{\n                        _id\n                        title\n                        date\n                        price\n                    }\n                    }\n                }\n        `,\n        };\n\n\n        fetch(keys.API_ENDPOINT, {\n            method: \"POST\",  //GRAPHQL WORKS WITH ONLY POST REQUEST\n            body: JSON.stringify(requestBody),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + this.context.token\n            }\n        })\n            .then(res => {\n                // console.log(\"Response: \", res);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                // console.log(\"Response Data: \", resData);\n                const bookings = resData.data.bookings;\n                // USING CUSTOM LEADER \n                if (this.isActive) {\n                    setTimeout(() => {\n                        this.setState({ bookings, isLoading: false });\n                    }, 600);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                if (this.isActive) {\n                    this.setState({ isLoading: false });\n                }\n            });\n\n    }\n\n\n\n    componentWillUnmount() {\n        this.isActive = false;\n    }\n\n\n\n\n\n    deleteBookingHandler = bookingId => {\n        // console.log(\"Cancel bookings hanlder\", bookingId);\n        this.setState({ isLoading: true });\n\n        // type Event{\n        //     _id: ID!\n        //     title: String!\n        //     description: String!\n        //     price: Float!\n        //     date: String!\n        //     creator: User!\n        // }\n        // cancelBooking(bookingId: ID!): Event!\n\n        // GETTING ALL bookings\n        const requestBody = {\n            query: `\n                    mutation CancelBooking($id: ID!) {\n                        cancelBooking(bookingId: $id){\n                            _id\n                            title\n                        }\n                    }\n            `,\n            variables: {\n                id: bookingId\n            }\n        };\n\n\n        fetch(keys.API_ENDPOINT, {\n            method: \"POST\",  //GRAPHQL WORKS WITH ONLY POST REQUEST\n            body: JSON.stringify(requestBody),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + this.context.token\n            }\n        })\n            .then(res => {\n                // console.log(\"Response: \", res);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                console.log(\"Response from cancel booking\");\n                // USING CUSTOM LEADER \n                setTimeout(() => {\n                    this.setState(prevState => {\n                        const updatedBookings = prevState.bookings.filter(booking => {\n                            return booking._id !== bookingId;\n                        });\n                        return { bookings: updatedBookings, isLoading: false }\n\n                    });\n                }, 600);\n            })\n            .catch(err => {\n                console.log(err);\n                if (this.isActive) {\n                    this.setState({ isLoading: false });\n                }\n            });\n    }\n\n    render() {\n        // console.log(\"State\", this.state);\n\n        // console.log(\"Token: \", this.context.token);\n\n        let content = <Dimmer active> <Loader size='massive' >Loading</Loader></Dimmer>;\n        if (!this.state.isLoading) {\n            const panes = [\n                { menuItem: 'List', render: () => <Tab.Pane><BookingList bookings={this.state.bookings} onDelete={this.deleteBookingHandler} /></Tab.Pane> },\n                { menuItem: 'Charts', render: () => <Tab.Pane><BookingCart bookings={this.state.bookings} /></Tab.Pane> },\n            ]\n            content = (\n                <React.Fragment>\n                    <Container>\n                        <Segment color=\"teal\">\n                            <Tab panes={panes} />\n                        </Segment>\n                    </Container>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                {content}\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Bookings;\n","import { Menu, Container, Button } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\nimport AuthContext from \"../context/auth-context\";\n\n\n\n\n\nimport React from 'react';\n\nconst Navigation = () => {\n    return (\n        <AuthContext.Consumer>\n            {(context) => {\n                return (\n                    <Menu stackable >\n                        <Container>\n                            <NavLink to=\"/\" >\n                                <Menu.Item style={{ color: \"teal\" }} name='event_management' >\n                                    Event Management\n                                </Menu.Item>\n                            </NavLink>\n                            <Menu.Menu position=\"right\">\n                                {!context.token &&\n                                    <NavLink to=\"/auth\" >\n                                        <Menu.Item name='auth' >\n                                            Auth\n                                        </Menu.Item>\n                                    </NavLink>\n                                }\n\n                                <NavLink to=\"/events\" >\n                                    <Menu.Item name='events' >\n                                        Events\n                                    </Menu.Item>\n                                </NavLink>\n\n                                {context.token && (\n                                    <React.Fragment>\n                                        <NavLink to=\"/bookings\" >\n                                            <Menu.Item name='bookings' >\n                                                Bookings\n                                        </Menu.Item>\n                                        </NavLink>\n\n                                        <Menu.Item name='logout' >\n                                            <Button onClick={context.logout} color=\"red\">\n                                                Logout\n                                                </Button>\n                                        </Menu.Item>\n                                    </React.Fragment>\n\n                                )}\n                            </Menu.Menu>\n\n                        </Container>\n                    </Menu>\n                );\n            }}\n        </AuthContext.Consumer>\n    )\n}\n\nexport default Navigation;\n\n","import './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport Auth from \"./pages/Auth\";\nimport Events from \"./pages/Events\";\nimport Bookings from \"./pages/Bookings\";\nimport Navigation from \"./components/Navigation\";\nimport AuthContext from \"./context/auth-context\";\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  }\n  componentDidMount(){\n    document.title = \"MERN Stack Events App\"\n  }\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  }\n  logout = () => {\n    this.setState({ token: null, userId: null });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter >\n          <React.Fragment>\n            <AuthContext.Provider value={{ token: this.state.token, userId: this.state.userId, login: this.login, logout: this.logout }}>\n              <Navigation />\n              <Switch>\n                {/* {!this.state.token && <Redirect from=\"/bookings\" to=\"/auth\" exact />} */}\n                {this.state.token && <Redirect from=\"/\" to=\"/events\" exact />}\n                {this.state.token && <Redirect from=\"/auth\" to=\"/events\" exact />}\n                {/* <Route path=\"/\" component={null} /> */}\n                {!this.state.token && <Route path=\"/auth\" component={Auth} />}\n                <Route path=\"/events\" component={Events} />\n                {this.state.token && <Route path=\"/bookings\" component={Bookings} />}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n\n              </Switch>\n            </AuthContext.Provider>\n          </React.Fragment>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}